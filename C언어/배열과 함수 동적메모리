#  C언어 - 배열과 함수 & 동적 메모리 할당

---

##  1. 배열과 함수

### 🔹 배열을 함수에 전달할 때
- 배열 이름은 **배열의 시작 주소** (즉, 포인터!)
- 배열을 함수에 전달하면 **배열 전체가 복사되는 것이 아니라 주소만 전달됨**

```c
void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
}
```

```c
int main() {
    int nums[] = {1, 2, 3};
    printArray(nums, 3);
    return 0;
}
```

> 배열을 넘기면 실제 배열의 복사본이 아닌 **원본 주소**가 전달됨

---

### 🔸 함수 매개변수에서의 배열 표현
- 아래는 모두 같은 의미임:

```c
void func(int arr[])      // 배열 형태
void func(int *arr)       // 포인터 형태
```

---

### 🔸 다차원 배열 전달

```c
void printMatrix(int arr[][3], int rows) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < 3; j++) {
            printf("%d ", arr[i][j]);
        }
    }
}
```

> 다차원 배열을 넘길 때는 **열의 크기(고정값)** 를 꼭 명시해야 함!

---

##  2. 동적 메모리 할당 (Dynamic Memory Allocation)

### 🔹 왜 필요한가?
- 프로그램 실행 중 필요한 메모리를 **필요한 만큼만** 할당하고 해제할 수 있게 해줌
- 정적인 배열보다 **메모리 효율이 좋고 유연함**

---

### 🔸 주요 함수 (stdlib.h 필요)

| 함수 | 설명 |
|------|------|
| `malloc(size)` | 메모리 '블록 1개' 할당 (초기화 X) |
| `calloc(n, size)` | 메모리 '블록 여러 개' 할당 (0으로 초기화) |
| `realloc(ptr, new_size)` | 크기 재조정 |
| `free(ptr)` | 할당된 메모리 해제 |

---

### 🔹 malloc 예시

```c
int *arr;
arr = (int*) malloc(5 * sizeof(int));  // 정수형 5개 공간

if (arr == NULL) {
    printf("메모리 할당 실패");
}
```

> 반환값은 `void*` → 형변환 필요  
> 실패 시 `NULL` 반환

---

### 🔹 calloc 예시 (초기화 포함)

```c
int *arr = (int*) calloc(5, sizeof(int));  // 5개 0으로 초기화
```

---

### 🔹 realloc 예시 (크기 변경)

```c
arr = (int*) realloc(arr, 10 * sizeof(int));  // 크기 10으로 확장
```

---

### 🔹 free 예시 (메모리 해제)

```c
free(arr);  // 동적 메모리 반환
```

> `free()` 후에 해당 메모리에 접근하면 **미정의 동작(undefined behavior)** 발생

---

##  동적 배열 + 함수 함께 쓰기 예시

```c
void inputArray(int *arr, int size) {
    for (int i = 0; i < size; i++) {
        scanf("%d", &arr[i]);
    }
}
```

```c
int main() {
    int *arr;
    int n;

    printf("입력 개수: ");
    scanf("%d", &n);

    arr = (int*) malloc(n * sizeof(int));

    inputArray(arr, n);
    free(arr);

    return 0;
}
```

---

##  요약 정리

| 개념 | 요점 |
|------|------|
| 배열과 함수 | 주소만 전달 (Call by reference) |
| 배열 매개변수 | `int arr[]` == `int *arr` |
| 동적 할당 | `malloc`, `calloc`, `realloc`, `free` |
| malloc vs calloc | 초기화 X vs 0으로 초기화 |
| free() | 반드시 사용 후 메모리 해제 |
