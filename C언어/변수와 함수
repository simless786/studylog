# C언어 - 변수와 함수 정리

## 변수의 속성
- 이름
- 타입
- 크기
- 값 + 범위
- **범위(Scope)**: 변수가 사용 가능한 범위 (가시성)
- **생존 시간(Lifetime)**: 메모리에 존재하는 시간
- **연결(Linkage)**: 다른 영역에 있는 변수와의 연결 상태

---

##  변수의 종류

### 🔸 지역 변수 (Local Variable)
- 함수나 블록 내부에서 선언됨
- 해당 블록이 끝나면 소멸됨
- 같은 이름을 다른 블록에서 사용할 수 있음
- 함수의 **매개변수**도 지역 변수의 일종

```c
void func(int x) { // x는 매개변수이자 지역 변수
    int y = 5;      // 지역 변수 y
}
```
- 초기화를 하지 않으면 **쓰레기 값(Garbage Value)**을 가짐

---

### 🔸 전역 변수 (Global Variable)
- 함수 외부에서 선언됨
- 소스 파일 전체에서 접근 가능
- 컴파일러가 **0으로 자동 초기화**함

```c
int total = 0; // 전역 변수

void add() {
    total += 1;
}
```

- 주의: 모든 함수에서 사용하는 공통 데이터는 전역 변수 사용
- 특정 함수에서만 사용하는 값은 **전역 변수보다 매개변수로 전달**하는 것이 좋음

---

##  변수의 범위(Scope) 종류

| 범위 종류 | 설명 |
|-----------|------|
| 블록 범위 | 지역 변수: 블록 안에서만 유효 |
| 파일 범위 | 전역 변수: 소스 파일 전체에서 유효 |
| 함수 범위 | 레이블(goto용)에 적용 |

> 변수의 **선언 위치**에 따라 범위가 결정됨

---

## 변수의 생존 시간(Lifetime)

| 생존 방식 | 설명 |
|-----------|------|
| **정적 할당 (static allocation)** | 프로그램 실행 시간 동안 계속 유지 |
| **자동 할당 (automatic allocation)** | 블록 진입 시 생성, 종료 시 소멸 |

---

##  저장 유형 지정자 (Storage Class Specifiers)

| 지정자 | 설명 |
|--------|------|
| `auto` | 기본값 (지역 변수는 자동 할당) |
| `static` | 정적 생존 시간, 블록 밖으로는 보이지 않음 |
| `register` | 레지스터에 저장 요청 (속도 향상 목적) |
| `extern` | 다른 파일에 선언된 전역 변수 참조 |
| `volatile` | 외부에서 수시로 변경되는 변수에 사용 (컴파일러 최적화 방지) |

---

##  자주 묻는 질문 (Q&A)

**Q1. 지역 변수를 블록 중간에 선언할 수 있나요?**  
A. 가능함. 선언된 이후부터 사용 가능.

**Q2. 똑같은 이름의 지역 변수가 서로 다른 함수에 정의될 수 있나요?**  
A. 네. 각각 독립적인 범위를 가짐.

**Q3. 지역 변수의 초기값은?**  
A. 초기화하지 않으면 **쓰레기 값(garbage value)**.

**Q4. 매개변수도 지역 변수인가요?**  
A. 네. 함수 내에서만 유효한 지역 변수입니다.

**Q5. 전역 변수의 초기값은?**  
A. 자동으로 0으로 초기화됨.

**Q6. 전역 변수와 같은 이름의 지역 변수가 있으면?**  
A. **지역 변수가 우선**됨.

**Q7. 파일 내에서만 접근 가능한 전역 변수는?**  
A. `static` 키워드로 선언한 전역 변수.

**Q8. 레지스터 변수란?**  
A. `register` 키워드를 사용한 변수로, CPU 레지스터에 저장 요청함.

**Q9. volatile 변수란?**  
A. 하드웨어나 인터럽트 등에 의해 값이 변할 수 있는 변수 → 컴파일러가 최적화하지 않도록 지정.


