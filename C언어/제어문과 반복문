#  C언어 - 제어문과 반복문 정리

## ✅ 제어문이란?
- 프로그램의 흐름을 제어하는 문장
- **조건문**과 **반복문**으로 나뉜다
- 만약 선택 구조가 없다면, 프로그램은 항상 동일한 동작만 반복하게 된다

---

## 📌 1. 조건문 (Conditional Statement)

### 🔸 if문
- 가장 기본적인 조건문
- 조건이 **참일 때만** 중괄호 `{}` 안의 코드 실행

```c
if (조건) {
    // 조건이 참일 때 실행할 코드
}
```

---

### 🔸 if-else문
- 조건이 참일 때와 거짓일 때 각각 다른 코드 실행

```c
if (조건) {
    // 조건이 참일 때 실행할 코드
} else {
    // 조건이 거짓일 때 실행할 코드
}
```

---

### 🔸 중첩 if문 (Nested if)
- if문 안에 또 다른 if문

```c
if (조건1) {
    // 조건1이 참
    if (조건2) {
        // 조건1, 조건2 모두 참
    }
}
```

---

### 🔸 switch문
- 여러 가지 경우 중 하나 선택
- `break` 필수!

```c
switch (변수) {
    case 값1:
        // 변수 == 값1
        break;
    case 값2:
        // 변수 == 값2
        break;
    default:
        // 모두 해당하지 않을 때
}
```

---

### 🔸 break문
- 반복문이나 switch문 **즉시 종료**

---

### 🔸 continue문
- 반복문에서 **이번 회차는 건너뛰고 다음 반복**

```c
for (int i = 0; i < 10; i++) {
    if (i == 5) continue;
    printf("%d ", i); // 5는 출력되지 않음
}
```

---

### 🔸 goto문
- 프로그램의 특정 위치로 이동  
- **일반적으로 권장되지 않음**

```c
goto 라벨;
// ...
라벨:
    // 이 위치로 이동
```

---

## 🔁 2. 반복문 (Loop)

### 🔸 while문
- 조건을 **먼저 검사**한 후 반복

```c
int i = 1;
while (i <= 10) {
    printf("%d\n", i);
    i++;
}
```

---

### 🔸 do-while문
- 조건을 **나중에 검사**, **무조건 한 번 실행**

```c
int i = 1;
do {
    printf("%d\n", i);
    i++;
} while (i <= 10);
```

---

### 🔸 for문
- 반복 횟수가 정해져 있을 때 적합  
- 초기값, 조건식, 증감식 한 줄에 작성

```c
for (int i = 1; i <= 10; i++) {
    printf("%d\n", i);
}
```

---

## ✅ 세 반복문의 차이점 요약

| 반복문 | 조건 검사 시점 | 최소 실행 횟수 | 특징 |
|--------|----------------|----------------|------|
| while | 반복 전에 검사 | 0회 가능 | 조건이 거짓이면 아예 실행 안 됨 |
| do-while | 반복 후에 검사 | **1회는 무조건 실행** | 입력 처리 등 초기 실행에 적합 |
| for | 반복 전에 검사 | 0회 가능 | 반복 횟수가 정해졌을 때 가장 편리 |
