#  C언어 - 배열과 포인터 정리

---

##  1. 배열 (Array)

### 🔹 배열이란?
- **같은 자료형**의 데이터를 **연속된 메모리 공간**에 저장하는 자료 구조
- 여러 개의 값을 하나의 이름으로 다룰 수 있음

### 🔹 배열 선언
```c
int scores[5];      // 정수형 5개짜리 배열 선언
char name[10];      // 문자형 배열 (문자열 저장 가능)
```

### 🔹 배열 초기화
```c
int a[3] = {1, 2, 3};
int b[5] = {0};      // 모두 0으로 초기화됨
```

### 🔹 배열 요소 접근
- 인덱스는 0부터 시작
```c
a[0] = 10;
printf("%d", a[1]);
```

---

##  2. 다차원 배열 (2차원 배열)

### 🔹 선언 및 초기화
```c
int matrix[2][3] = {
    {1, 2, 3},
    {4, 5, 6}
};
```

### 🔹 요소 접근
```c
matrix[0][1];  // 1행 2열의 값 (2)
```

---

##  3. 문자열과 배열

### 🔹 문자열 배열 선언
```c
char str[6] = "Hello";
char str2[] = {'H', 'e', 'l', 'l', 'o', '\0'};
```

- 문자열은 마지막에 **널 문자(`\0`)** 포함해야 함

---

##  4. 포인터 (Pointer)

### 🔹 포인터란?
- **메모리 주소**를 저장하는 변수
- 변수의 위치를 가리킴 (reference)

### 🔹 포인터 선언
```c
int a = 10;
int *p = &a;  // p는 a의 주소를 저장
```

| 문법 | 의미 |
|------|------|
| `*p` | p가 가리키는 곳의 값 |
| `&a` | 변수 a의 주소 |

---

##  5. 포인터와 배열

- 배열 이름은 **배열의 시작 주소**를 의미함
```c
int arr[3] = {1, 2, 3};
int *p = arr;   // == &arr[0]
```

- 포인터로 배열 요소 접근 가능
```c
printf("%d", *(p + 1));   // arr[1]
```

---

## ✅ 6. 포인터 연산

| 연산 | 설명 |
|------|------|
| `p + 1` | 다음 요소의 주소 (자료형 크기만큼 이동) |
| `*p` | p가 가리키는 주소의 값 |
| `&*p`, `*&p` | 원래의 p |

---

##  7. 문자열과 포인터

- 문자열도 문자 배열 = 포인터로 다룰 수 있음
```c
char *str = "Hello";
printf("%c", *(str + 1)); // 'e'
```

---

##  8. 이중 포인터

- 포인터를 가리키는 포인터
```c
int a = 10;
int *p = &a;
int **pp = &p;

printf("%d", **pp); // 10
```

---

##  9. 포인터 주의사항

- 초기화하지 않은 포인터는 **쓰레기 주소**를 가짐 → 반드시 초기화
- NULL 포인터: `int *p = NULL;` → 유효하지 않은 주소

---

##  정리

| 개념 | 설명 |
|------|------|
| 배열 | 동일 자료형 데이터의 연속 공간 |
| 문자열 | 문자 배열 + `\0` 포함 |
| 포인터 | 메모리 주소 저장 |
| 배열과 포인터 | 배열 이름은 시작 주소 |
| 이중 포인터 | 포인터를 가리키는 포인터 |

