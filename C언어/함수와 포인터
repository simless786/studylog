#  C언어 - 함수와 포인터 정리

---

##  함수와 포인터의 관계

- **포인터**를 통해 **함수에 변수의 주소를 전달**하면
  → 함수 내에서 원본 데이터를 수정할 수 있음  
- 이를 **Call by reference**(참조에 의한 호출)이라고 함

---

## 🔹 함수 인자 전달 방식

| 방식 | 설명 | 예시 |
|------|------|------|
| Call by value | 값을 복사하여 전달 | 일반적인 함수 호출 |
| Call by reference | 주소(포인터)를 전달 | 원본 데이터 수정 가능 |

---

## 🔸 Call by Value 예시 (값만 복사됨)

```c
void add(int x) {
    x = x + 1;
}

int main() {
    int a = 5;
    add(a);
    printf("%d", a);  // 출력: 5 (원본 안 바뀜)
}
```

---

## 🔸 Call by Reference 예시 (주소 전달, 원본 수정됨)

```c
void add(int *x) {
    *x = *x + 1;
}

int main() {
    int a = 5;
    add(&a);
    printf("%d", a);  // 출력: 6 (원본 변경됨)
}
```

---

##  포인터를 반환하는 함수

- 함수에서 **포인터**를 반환할 수도 있음

```c
int* larger(int *a, int *b) {
    if (*a > *b)
        return a;
    else
        return b;
}
```

- 반환 타입이 `int*`, 즉 정수형 포인터

> ⚠️ 주의: 함수 내에서 선언된 지역 변수의 주소를 **반환하면 안 됨!**
> - 이미 소멸된 메모리 주소가 되어버림

---

## 🔧 포인터 배열 vs 함수 배열

### 🔸 포인터 배열 (Array of Pointers)
```c
char *names[] = {"Kim", "Lee", "Park"};
printf("%s", names[1]);  // Lee
```

### 🔸 함수 포인터 (Function Pointer)
- 함수를 **포인터 변수에 저장**하고 나중에 호출할 수 있음

```c
int add(int a, int b) {
    return a + b;
}

int (*funcPtr)(int, int);  // 함수 포인터 선언

funcPtr = add;
int result = funcPtr(3, 4);  // 결과: 7
```

> 함수 포인터는 **콜백 함수**나 **동적 함수 호출**에 자주 사용됨

---

##  함수 포인터 배열 예시

```c
int add(int a, int b) { return a + b; }
int sub(int a, int b) { return a - b; }

int (*fp[2])(int, int) = { add, sub };

int main() {
    printf("%d", fp[0](5, 2));  // 7
    printf("%d", fp[1](5, 2));  // 3
}
```

---

##  요약 정리

| 개념 | 설명 |
|------|------|
| 포인터 전달 | 함수에 주소를 넘겨 원본 수정 가능 |
| 포인터 반환 | 지역변수 주소는 반환 X |
| 함수 포인터 | 함수를 가리키는 포인터 |
| 함수 포인터 배열 | 여러 함수를 포인터 배열로 관리 |

---

 함수 + 포인터는 **메모리와 실행 흐름을 모두 이해해야 하는 중요한 주제**야!  
이해하고 실습까지 하면 너의 실력이 확실히 올라갈 거야 🔥



