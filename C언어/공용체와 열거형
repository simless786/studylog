#  C언어 - 공용체(Union) & 열거형(Enum)

---

##  1. 공용체 (union)

### 🔹 공용체란?

- 여러 개의 멤버를 **하나의 메모리 공간**에서 **공유**하는 사용자 정의 자료형
- 한 번에 **하나의 값만 저장 가능**
- 구조체와 문법은 비슷하지만 **메모리 구조가 다름**

---

### 🔸 공용체 선언

```c
union Data {
    int i;
    float f;
    char str[20];
};
```

> `int`, `float`, `char[20]` 중 **가장 큰 자료형 크기만큼만** 메모리 할당됨

---

### 🔸 사용 예시

```c
union Data data;

data.i = 10;
printf("%d\n", data.i);

data.f = 3.14;
printf("%f\n", data.f);  // 이제 i는 값이 손상됨
```

> 최근에 저장된 값만 **정상적으로 읽을 수 있음**

---

### 🔸 구조체 vs 공용체

| 항목 | 구조체 (struct) | 공용체 (union) |
|------|------------------|-----------------|
| 메모리 | 멤버마다 독립 공간 할당 | 멤버끼리 메모리 공유 |
| 사용 | 모든 멤버 동시 사용 가능 | 한 번에 하나만 사용 |
| 크기 | 모든 멤버 크기 총합 | 가장 큰 멤버의 크기 |

---

##  2. 열거형 (enum)

### 🔹 열거형이란?

- 의미 있는 **상수 목록**을 정의할 수 있는 자료형
- 각각의 식별자에 **정수 값이 자동 할당**됨 (기본: 0부터 시작)

---

### 🔸 열거형 선언

```c
enum Day { MON, TUE, WED, THU, FRI, SAT, SUN };
```

| 이름 | 값 |
|------|----|
| MON  | 0  |
| TUE  | 1  |
| ...  | ... |
| SUN  | 6  |

---

### 🔸 열거형 변수 사용

```c
enum Day today;
today = WED;

printf("%d", today);  // 출력: 2
```

---

### 🔸 값 지정도 가능

```c
enum Month { JAN = 1, FEB, MAR = 5, APR }; 
```

| 이름 | 값 |
|------|----|
| JAN  | 1  |
| FEB  | 2  |
| MAR  | 5  |
| APR  | 6  |

---

### 🔸 typedef와 함께 쓰기

```c
typedef enum { RED, GREEN, BLUE } Color;
Color c = GREEN;
```

> 이제 `enum` 없이 `Color` 타입으로 사용 가능

---

##  요약 정리

| 개념 | 설명 |
|------|------|
| 공용체 | 여러 멤버가 하나의 메모리 공간 공유 |
| 구조체와 차이 | 구조체는 각 멤버마다 메모리, 공용체는 공유 |
| 열거형 | 상수에 이름을 붙여줌 (0부터 자동 할당) |
| typedef + enum | 타입을 간단히 사용 가능 |



