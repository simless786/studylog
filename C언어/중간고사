# 💻 컴퓨터 개론 & 프로그래밍 기초 정리

## 1. 컴퓨터란?
- 컴퓨터는 범용적인 기계이다.
- 컴퓨터를 범용적으로 만드는 것은 **프로그램 사용** 덕분이다.

### 🔎 계산기 vs 컴퓨터
| 항목 | 계산기 | 컴퓨터 |
|------|--------|--------|
| 기능 | 정해진 기능만 수행 | 다양한 기능 수행 가능 |
| 변경 가능성 | 불가능 | 프로그램으로 변경 가능 |

- 컴퓨터는 단순히 계산(compute)만 하는 기계가 아니다.
- 프로그램: 특정 작업을 위한 작업 지시서

---

## 2. 컴퓨터 역사

###  최초의 프로그래머: 에이다 러브레이스
- 찰스 배비지의 해석 기관에 매료됨
- 서브루틴, 루프, 점프 등 개념 고안

### 🔧 배비지의 해석 기관 구성
- 중앙 처리 장치 (mill)
- 메모리 (store)
- 출력 장치 (다이얼)
- 입력 장치 (천공 카드)

### 🖥️ 애니악(ENIAC)
- 프로그램은 스위치로 설정
- 바꾸려면 스위치 재연결

### 🧩 폰 노이만 구조
- 프로그램을 메인 메모리에 저장
- 순차적으로 명령어 실행

---

## 3. 컴퓨터 언어와 프로그램

### 🧾 프로그램이란?
- 컴퓨터에게 해야 할 작업을 알려주는 문서

### 🧠 컴퓨터의 특징
- 상식이나 지능이 없음
- 아주 **자세하고 구체적으로** 지시해야 함
- 빠르고 정확하며 반복을 잘함

### 🔤 컴퓨터 언어의 종류

| 종류 | 특징 |
|------|------|
| 기계어 | 0과 1로 구성, CPU 의존적 |
| 어셈블리어 | 기호로 표현된 기계어 |
| 고급언어 | 인간 친화적, CPU 독립적 |

> 💡 **컴파일러**: 고급 언어 → 기계어로 번역  
> 💡 **인터프리터**: 한 줄씩 실행 (예: 파이썬)

---

## 4. 고급 언어 소개

- **포트란**: 수치 계산, 과학 기술
- **코볼**: 비즈니스 업무용, 구어체 문장
- **파이썬**: 인터프리트어, AI/데이터 분석
- **C**: 절차지향 언어
- **C++**: 클래스/객체지향 추가
- **JAVA**: 완전한 객체지향 언어

---

## 5. 알고리즘

### 🧮 알고리즘이란?
- 문제 해결을 위한 **단계적 절차**

### 📌 알고리즘 표현 방법
- 자연어
- 순서도 (처리: 사각형, 조건: 마름모, 입출력: 평행사변형)
- 의사코드 (pseudocode)

### 🧠 알고리즘의 중요성
- 알고리즘이 틀리면 프로그램도 논리적 오류 발생

### ✅ 알고리즘 만드는 법
- 문제를 **작은 단위로 분해**

---

## 6. 프로그램 개발 과정

1. 요구사항 분석
2. 설계
3. 구현
4. 테스팅
5. 유지보수

---

## 7. 컴파일과 실행

- **소스 코드** → 컴파일 → 오브젝트 파일 (.obj)
- 오브젝트 파일 + 라이브러리 → **실행파일 (.exe)**

### 컴파일 오류
- 문법 오류

### 실행 시간 오류
- 0으로 나누기, 잘못된 메모리 접근 등

### 논리 오류
- 문법은 맞지만 결과가 틀림

### 유지보수
- 전체 비용의 50% 이상 차지

---

## 8. C언어 기초 구조

```c
#include <stdio.h>

int main(void) {
    printf("Hello, World!\n");
    return 0;
}
```

### 주요 구성요소
- `#include`: 헤더파일 포함
- `main()`: 메인 함수
- `printf()`: 출력 함수
- `return 0;`: 프로그램 종료

---

## 9. 변수와 자료형

### 🗃️ 변수란?
- 데이터를 저장할 **메모리 공간**

### 자료형

| 유형 | 종류 |
|------|------|
| 정수형 | short, int, long long |
| 실수형 | float, double |
| 문자형 | char |

### 상수 vs 변수
- `const` 키워드로 상수 정의
- 기호 상수는 `#define`

---

## 10. 연산자

- 산술: `+`, `-`, `*`, `/`, `%`
- 증감: `++`, `--`
- 대입: `=`, `+=`, `-=`, ...
- 관계: `==`, `!=`, `>`, `<`, ...
- 논리: `&&`, `||`, `!`

> 주의: `=`은 대입, `==`은 비교

---

## 11. 입출력 함수

### 📤 출력: `printf()`

| 형식 지정자 | 설명 |
|-------------|------|
| `%d` | 정수 출력 |
| `%f` | 실수 출력 |
| `%c` | 문자 출력 |
| `%s` | 문자열 출력 |

### 📥 입력: `scanf()`

- 변수 주소 필요 (`&` 사용)
- `scanf_s()` 권장 (Visual Studio 보안 경고 피하기)

---

## 12. 디버깅 단축키 (Visual Studio)

| 단축키 | 기능 |
|--------|------|
| F5 | 전체 실행 |
| F9 | 브레이크포인트 설정 |
| F10 | Step Over |
| F11 | Step Into |

---

## 13. 문자 & 아스키 코드

- `char`로 문자 저장
- 내부적으로 아스키 코드 사용
- 줄바꿈: `\\n`, 탭: `\\t`, 백스페이스 등은 **제어 문자**

