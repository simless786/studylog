#  C언어 - 파일 입출력 (File I/O)

---

##  파일 입출력이란?

- 프로그램 실행 중에 **외부 파일과 데이터를 주고받는 작업**
- 키보드/모니터 대신 **파일로부터 데이터를 읽고, 파일에 데이터를 출력**함

---

##  1. 파일 포인터

- 파일 입출력을 위해서는 `FILE *` 포인터 사용
```c
FILE *fp;
```

- 파일 포인터는 `stdio.h`에 정의되어 있음

---

##  2. 파일 열기 (fopen)

```c
fp = fopen("파일이름", "모드");
```

### 🔸 파일 열기 모드

| 모드 | 의미 |
|------|------|
| `"r"` | 읽기 전용 (파일이 없으면 실패) |
| `"w"` | 쓰기 전용 (기존 파일 덮어씀, 없으면 생성) |
| `"a"` | 추가 쓰기 (파일 끝에 이어쓰기) |
| `"r+"` | 읽기 + 쓰기 |
| `"w+"` | 읽기 + 쓰기 (기존 내용 삭제) |
| `"a+"` | 읽기 + 추가쓰기 |

---

### 🔸 파일 열기 예시

```c
FILE *fp = fopen("data.txt", "w");
if (fp == NULL) {
    printf("파일 열기 실패");
}
```

---

##  3. 파일 닫기 (fclose)

- 파일 작업이 끝나면 반드시 닫아야 함
```c
fclose(fp);
```

---

##  4. 파일에 쓰기

### 🔸 `fprintf()`

```c
fprintf(fp, "이름: %s, 나이: %d\n", name, age);
```

### 🔸 `fputs()`

```c
fputs("Hello, File!\n", fp);
```

---

##  5. 파일에서 읽기

### 🔸 `fscanf()`

```c
fscanf(fp, "%s %d", name, &age);
```

### 🔸 `fgets()` (한 줄 읽기)

```c
fgets(buffer, sizeof(buffer), fp);
```

---

##  6. 문자 단위 입출력

### 🔸 `fgetc()`: 문자 1개 읽기

```c
char ch = fgetc(fp);
```

### 🔸 `fputc()`: 문자 1개 쓰기

```c
fputc('A', fp);
```

---

##  7. 예제: 파일에 쓰고 읽기

```c
#include <stdio.h>

int main() {
    FILE *fp;

    // 파일 쓰기
    fp = fopen("test.txt", "w");
    if (fp == NULL) return 1;
    fprintf(fp, "Hello C!\n");
    fclose(fp);

    // 파일 읽기
    char str[100];
    fp = fopen("test.txt", "r");
    if (fp == NULL) return 1;
    fgets(str, 100, fp);
    printf("읽은 내용: %s", str);
    fclose(fp);

    return 0;
}
```

---

##  파일 포인터 함수 요약

| 함수 | 설명 |
|------|------|
| `fopen()` | 파일 열기 |
| `fclose()` | 파일 닫기 |
| `fprintf()` | 포맷 문자열 쓰기 |
| `fscanf()` | 포맷 문자열 읽기 |
| `fputs()` / `fgets()` | 문자열 쓰기 / 읽기 |
| `fputc()` / `fgetc()` | 문자 쓰기 / 읽기 |

---

##  파일 입출력 주의사항

- `fopen()` 실패 시 `NULL` 반환 → 꼭 예외 처리!
- `fclose()` 반드시 호출해서 **메모리 누수 방지**
- 경로 지정 시 Windows는 `\\` 또는 `//` 사용

